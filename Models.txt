XGBClassifier
model = XGBClassifier(max_depth=50, min_child_weight=1,  n_estimators=200,n_jobs=-1 , verbose=1,learning_rate=0.16)
model.fit(X_train,Y_train)
y_pred = model.predict(X_test)
print(classification_report(Y_test, y_pred))

XGBRegressor
model = XGBRegressor(objective ='reg:squarederror',colsample_bytree = 0.3, learning_rate = 0.1,max_depth = 5, alpha = 2, n_estimators = 10)
model.fit(X_train, Y_train)
y_pred = model.predict(X_test)
print(r2_score(Y_test,y_pred))
_____________________________________________________________________________________________________________________

DecisionTreeClassifier
tree = DecisionTreeClassifier(max_depth=2)
tree = tree.fit(X_train,Y_train)
y_pred = tree.predict(X_test)
print(classification_report(Y_test, y_pred))

DecisionTreeRegressor
model = DecisionTreeRegressor()
model.fit(X_train, Y_train)
y_pred = model.predict(X_test)
print(r2_score(Y_test,y_pred))
_____________________________________________________________________________________________________________________

RandomForestRegressor
model2 = RandomForestRegressor()
model2.fit(X_train, Y_train)
y_pred = model2.predict(X_test)
print(r2_score(Y_test,y_pred))

RandomForestClassifier
model = RandomForestClassifier()
model.fit(X_train,Y_train)
y_pred = model.predict(X_test)
print(classification_report(Y_test, y_pred))
_____________________________________________________________________________________________________________________

LGBMClassifier
clf = LGBMClassifier()
clf.fit(X_train, Y_train)
y_pred = clf.predict(X_test)
print(classification_report(Y_test, y_pred))
_____________________________________________________________________________________________________________________

Grid
cv = GridSearchCV(estimator=knn,param_grid=param_grid,cv=5)
cv.fit(X_train, Y_train)

# Best hyperparameters
print("Best Parameters:", cv.best_params_)
# Best model
best_knn = cv.best_estimator_
y_pred = best_knn.predict(X_test)
print("Test Accuracy:", accuracy_score(Y_test, y_pred))
_____________________________________________________________________________________________________________________
Mean - Normalna distribucija
Median - Koga ne e normalna

Skew()
-0.5 - 0.5 => Mean
Else Median

Аko relacijata e >= 0.7
KNNImputer
_____________________________________________________________________________________________________________________
!pip install pandas #
!pip install numpy #
!pip install matplotlib #
!pip install xgboost #
!pip install sklearn #
!pip install seaborn #
!pip install missingno
!pip install lightgbm







